---

- name: Include variables from ansible vault
  hosts: localhost
  gather_facts: no
  roles:
    - role: ansible_vault_reader

- name: Create a VM on Proxmox from a Template
  hosts: localhost
  gather_facts: no
  vars:
    vault_vars: "{{ hostvars['VAULT_HOST'].vault_secrets.secret }}"
  vars_prompt:
    - name: vm_name
      prompt: "Enter the VM name"
      default: "test_vm"  # Default VM name
      private: no

  tasks:
    - name: Clone VM from Template
      community.general.proxmox_kvm:
        api_user: "{{ api_user | default('root@pam') }}"
        api_password: "{{ vault_vars.proxmox_password }}"
        api_host: "{{ proxmox_ip }}"
        validate_certs: no
        node: "{{ node | default('proxmox')}}"
        vmid: "{{ vmid | default('105') }}"
        name: "{{ vm_name }}"
        clone: "{{ vm_template | default('rocky_linux_template') }}"
        target: "{{ node | default('proxmox')}}"  
        full: "{{ vm_full | default('yes') }}"
        storage: "{{ vm_storage | default('local-lvm') }}"
        format: "{{ vm_format | default('raw') }}"
      register: clone_result
      delegate_to: localhost

    - name: Fail if VM with name already exists
      fail:
        msg: "VM with name {{ vm_name }} already exists"
      when: "'VM with name' in clone_result.msg"

# - name: Clone VM with source vmid and target newid and raw format
#   community.general.proxmox_kvm:
#     api_user: root@pam
#     api_password: secret
#     api_host: helldorado
#     clone: arbitrary_name
#     vmid: 108
#     newid: 152
#     name: zavala
#     node: sabrewulf
#     storage: LVM_STO
#     format: raw
#     timeout: 300

    - name: Conditionally create VM from ISO if specified
      community.general.proxmox_kvm:
        api_user: "{{ api_user | default('root@pam') }}"
        api_password: "{{ api_password }}"
        api_host: "{{ api_host }}"
        validate_certs: no
        node: "{{ node }}"
        vmid: "{{ vmid | default(omit) }}"
        name: "{{ vm_name }}"
        memory: "{{ vm_memory | default(2048) }}"
        cores: "{{ vm_cores | default(2) }}"
        net:
          net0: "virtio,bridge={{ vm_net_bridge | default('vmbr0') }}"
        virtio:
          virtio0: "local={{ vm_disk_size | default('10G') }},format=qcow2"
        iso: "{{ vm_iso }}"
      when: vm_iso is defined and vm_iso | length > 0
      delegate_to: localhost
