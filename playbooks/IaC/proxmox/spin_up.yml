---

- name: Include variables from ansible vault
  hosts: localhost
  gather_facts: no
  roles:
    - role: ansible_vault_reader

- name: Include variables from ansible vault
  hosts: localhost
  gather_facts: no
  vars:
    vault_vars: "{{ hostvars['VAULT_HOST'].vault_secrets.secret }}"
    base_name: "Test-"
    start_index: 1
    max_attempts: 100

  tasks:
    - name: Authenticate and obtain a ticket
      uri:
        url: "https://{{ proxmox_ip }}:8006/api2/json/access/ticket"
        method: POST
        validate_certs: no
        body_format: form-urlencoded
        body:
          username: "{{ proxmox_username | default('root@pam') }}"
          password: "{{ vault_vars.proxmox_password }}"
      register: auth_response

    - name: Set ticket and CSRFPreventionToken
      set_fact:
        proxmox_ticket: "{{ auth_response.json.data.ticket }}"
        csrf_token: "{{ auth_response.json.data.CSRFPreventionToken }}"

    - name: VM Manual Name Handling
      block:
        - name: Prompt for VM name or press Enter to auto-generate
          pause:
            prompt: "Enter the name of the VM to create or press Enter to auto-generate: "
          register: manual_vm_name_input

        - name: Set VM name from input if provided
          set_fact:
            vm_name: "{{ manual_vm_name_input.user_input | default('') }}"
          when: manual_vm_name_input.user_input is defined and manual_vm_name_input.user_input | length > 0

      when: vm_name is not defined or vm_name | length == 0

    - name: Generate VM Name
      block:
        - name: List VMs on Proxmox node using Token
          uri:
            url: "https://{{ proxmox_ip }}:8006/api2/json/nodes/{{ node | default('proxmox') }}/qemu"
            headers:
              Cookie: "PVEAuthCookie={{ proxmox_ticket }}"
              CSRFPreventionToken: "{{ csrf_token }}"
            validate_certs: no
            return_content: yes
          register: vm_list_response

        - name: Extract relevant VM data
          set_fact:
            vms: "{{ vm_list_response.json | json_query('data[*].{name: name, vmid: vmid, status: status}') }}"

        - name: Find an available VM name
          set_fact:
            available_name: "{{ base_name + item | string }}"
          loop: "{{ range(start_index, start_index + max_attempts) | list }}"
          when: vms | map(attribute='name') | list | select('search', '^' + base_name + item | string + '$') | list | length == 0
          register: available_name_result
          until: available_name_result.ansible_facts is defined
          retries: "{{ max_attempts }}"

        - name: Set the final VM name
          set_fact:
            vm_name: "{{ available_name }}"
          when: available_name is defined

        - name: Fail if no available name found
          fail:
            msg: "No available name found after {{ max_attempts }} attempts"
          when: vm_name is not defined or vm_name | length == 0

      when: vm_name is not defined or vm_name | length == 0

    - name: VM Creation
      block:
        - name: Use the available VM name for further operations
          debug:
            msg: "Using VM name: {{ vm_name }}"

        - name: Clone VM from Template
          community.general.proxmox_kvm:
            api_user: "{{ api_user | default('root@pam') }}"
            api_password: "{{ vault_vars.proxmox_password }}"
            api_host: "{{ proxmox_ip }}"
            validate_certs: no
            node: "{{ node | default('proxmox') }}"
            vmid: "{{ vmid | default('105') }}"
            name: "{{ vm_name }}"
            clone: "{{ vm_template | default('rocky_linux_template') }}"
            target: "{{ node | default('proxmox') }}"
            full: "{{ vm_full | default('yes') }}"
            storage: "{{ vm_storage | default('local-lvm') }}"
            format: "{{ vm_format | default('raw') }}"
            timeout: "600"
          register: clone_result
          when: not vm_name_exists

        - name: Fail if VM with name already exists
          fail:
            msg: "VM with name {{ vm_name }} already exists"
          when: vm_name_exists

      when: proxmox_ticket is defined