---

- name: Include variables from ansible vault
  hosts: localhost
  gather_facts: no
  roles:
    - role: ansible_vault_reader

---
- name: Include variables from ansible vault
  hosts: localhost
  gather_facts: no
  vars:
    vault_vars: "{{ hostvars['VAULT_HOST'].vault_secrets.secret }}"
    base_name: "Test-"
    start_index: 1
    max_attempts: 100
    proxmox_ip: "192.168.0.128"
    api_user: "root@pam"
    api_password: "{{ vault_vars.proxmox_password }}"
    node: "proxmox" # Default node name, adjust as necessary

  tasks:
    - name: Authentication and VM Name Handling
      block:
        - name: Prompt for VM name or press Enter to auto-generate
          pause:
            prompt: "Enter the name of the VM to create or press Enter to auto-generate: "
          register: manual_vm_name_input
          when: vm_name is not defined or vm_name | length == 0

        - name: Set VM name from input if provided
          set_fact:
            vm_name: "{{ manual_vm_name_input.user_input | default('') }}"
          when: manual_vm_name_input.user_input is defined and manual_vm_name_input.user_input | length > 0

        - name: Obtain Authentication Token
          uri:
            url: "https://{{ proxmox_ip }}/api2/json/access/ticket"
            method: POST
            body_format: form-urlencoded
            body: "username={{ api_user }}&password={{ api_password }}"
            validate_certs: no
            return_content: yes
          register: login_response
          when: vm_name is not defined or vm_name | length == 0

        - name: Set Authentication Token and CSRF Token as Facts
          set_fact:
            auth_cookie: "{{ login_response.json.data.ticket }}"
            csrf_token: "{{ login_response.json.data.CSRFPreventionToken }}"
          when: login_response is defined

      - name: VM Name Availability Check
        block:
          - name: List VMs on Proxmox node using Token
            uri:
              url: "https://{{ proxmox_ip }}/api2/json/nodes/{{ node }}/qemu"
              method: GET
              return_content: yes
              headers:
                Cookie: "PVEAuthCookie={{ auth_cookie }}"
              validate_certs: no
            register: vm_list_response
            when: auth_cookie is defined

          - name: Check if VM name exists
            set_fact:
              vm_name_exists: "{{ vm_list_response.json.data | json_query('[?name==`' + vm_name + '`]') | length > 0 }}"
            when:
              - vm_list_response is defined
              - vm_list_response.status == 200

          - name: Debug - VM name availability
            debug:
              msg: "VM name '{{ vm_name }}' exists: {{ vm_name_exists }}"
            when: vm_name_exists is defined

    - name: VM Creation
      block:
        - name: Use the available VM name for further operations
          debug:
            msg: "Using VM name: {{ vm_name }}"

        - name: Clone VM from Template
          community.general.proxmox_kvm:
            api_user: "{{ api_user | default('root@pam') }}"
            api_password: "{{ vault_vars.proxmox_password }}"
            api_host: "{{ proxmox_ip }}"
            validate_certs: no
            node: "{{ node | default('proxmox') }}"
            vmid: "{{ vmid | default('105') }}"
            name: "{{ vm_name }}"
            clone: "{{ vm_template | default('rocky_linux_template') }}"
            target: "{{ node | default('proxmox') }}"  
            full: "{{ vm_full | default('yes') }}"
            storage: "{{ vm_storage | default('local-lvm') }}"
            format: "{{ vm_format | default('raw') }}"
            timeout: "600"
          register: clone_result
          when: not vm_name_exists

        - name: Fail if VM with name already exists
          fail:
            msg: "VM with name {{ vm_name }} already exists"
          when: vm_name_exists

      when: auth_cookie is defined
