---

- name: Include variables from ansible vault
  hosts: localhost
  gather_facts: no
  roles:
    - role: ansible_vault_reader

- name: Create a VM on Proxmox from a Template
  hosts: localhost
  gather_facts: no
  vars:
    vault_vars: "{{ hostvars['VAULT_HOST'].vault_secrets.secret }}"

  tasks:

    - name: VM Name Block
      block:
        - name: Prompt for VM name or press Enter to auto-generate
          pause:
            prompt: "Enter the name of the VM to create or press Enter to auto-generate: "
            # Set a timeout for the prompt. For demonstration, a 15-second timeout.
            timeout: 15
          register: manual_vm_name_input

        - name: Set VM name from input if provided
          set_fact:
            vm_name: "{{ manual_vm_name_input.user_input | default('') }}"
          when: manual_vm_name_input.user_input is defined and manual_vm_name_input.user_input | length > 0

      when: vm_name is not defined or vm_name | length == 0

    - name: Find available VM name
      block:
        - name: Check if VM name exists
          community.general.proxmox_kvm:
            api_user: "{{ api_user }}"
            api_password: "{{ api_password }}"
            api_host: "{{ api_host }}"
            validate_certs: no
            node: "{{ node }}"
            name: "{{ base_name }}{{ '%02d' | format(item) }}"
          register: vm_check
          failed_when: "'VM with name' in vm_check.msg and vm_check.failed"
          ignore_errors: true
          loop: "{{ range(start_index, start_index + max_attempts) | list }}"
          loop_control:
            extended: yes
            index_var: current_attempt

        - name: Set available VM name
          set_fact:
            vm_name: "{{ base_name }}{{ '%02d' | format(current_attempt) }}"
          when: vm_check.failed
          loop: "{{ vm_check.results }}"
          loop_control:
            loop_var: vm_check
          changed_when: false
          failed_when: current_attempt == max_attempts - 1 and vm_name == ""
      when: vm_name is not defined

      rescue:
        - name: Fail if no available name is found
          fail:
            msg: "No available VM name found after {{ max_attempts }} attempts."

    - name: Use the available VM name for further operations
      debug:
        msg: "Using VM name: {{ vm_name }}"

    - name: Clone VM from Template
      community.general.proxmox_kvm:
        api_user: "{{ api_user | default('root@pam') }}"
        api_password: "{{ vault_vars.proxmox_password }}"
        api_host: "{{ proxmox_ip }}"
        validate_certs: no
        node: "{{ node | default('proxmox')}}"
        vmid: "{{ vmid | default('105') }}"
        name: "{{ vm_name }}"
        clone: "{{ vm_template | default('rocky_linux_template') }}"
        target: "{{ node | default('proxmox')}}"  
        full: "{{ vm_full | default('yes') }}"
        storage: "{{ vm_storage | default('local-lvm') }}"
        format: "{{ vm_format | default('raw') }}"
        timeout: "600"
      register: clone_result

    - name: Fail if VM with name already exists
      fail:
        msg: "VM with name {{ vm_name }} already exists"
      when: "'VM with name' in clone_result.msg"

    - name: Conditionally create VM from ISO if specified
      community.general.proxmox_kvm:
        api_user: "{{ api_user | default('root@pam') }}"
        api_password: "{{ api_password }}"
        api_host: "{{ api_host }}"
        validate_certs: no
        node: "{{ node }}"
        vmid: "{{ vmid | default(omit) }}"
        name: "{{ vm_name }}"
        memory: "{{ vm_memory | default(2048) }}"
        cores: "{{ vm_cores | default(2) }}"
        net:
          net0: "virtio,bridge={{ vm_net_bridge | default('vmbr0') }}"
        virtio:
          virtio0: "local={{ vm_disk_size | default('10G') }},format=qcow2"
        iso: "{{ vm_iso }}"
      when: vm_iso is defined and vm_iso | length > 0
